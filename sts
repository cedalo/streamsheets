#!/usr/bin/env node

/* eslint-disable no-console */
const cp = require('child_process');
const prompts = require('prompts');

const execForResult = (command) =>
	cp
		.execSync(command)
		.toString()
		.trim();

const exec = (command) => cp.execSync(command, { stdio: 'inherit' });

const currentBranch = () => execForResult('git rev-parse --abbrev-ref HEAD');

const fail = (message) => {
	console.error(message);
	process.exit(1);
};
const quitIf = (condition) => condition && process.exit(0);
const failIf = (condition, message) => condition && fail(message);

// eslint-disable-next-line
require('yargs')
	.command(
		'version <newversion>',
		'Set version with `npm version` in all packages',
		() => {},
		(argv) => {
			const newVersion = argv.newversion;
			const workspaceInfo = JSON.parse(cp.execSync('yarn workspaces -s info'));
			const workspaceInfoEntries = Object.entries(workspaceInfo);
			workspaceInfoEntries.forEach(async ([name, { location }]) => {
				if (name === 'mqtt') {
					return;
				}
				cp.exec(`npm version ${newVersion} --allow-same-version`, { cwd: location });
			});
		}
	)
	.command(
		'release-prep <newversion>',
		'Prepare branches for new release',
		() => {},
		async (argv) => {
			const { newversion } = argv;
			console.log(`Preparing branches for version "${newversion}"`);
			failIf(currentBranch() !== 'master', 'Not on branch "master"');
			// if (exec(`git status --porcelain --untracked-files=no`)) {
			// 	fail('Working directory not clean');
			// }

			const branches = [`release/${newversion}`, `release/${newversion}-festo`];

			const { createBranches } = await prompts({
				type: 'confirm',
				name: 'createBranches',
				message: `Create branches ${branches.join(', ')}?`,
				initial: false
			});
			quitIf(!createBranches);
			branches.forEach((branch) => exec(`git branch ${branch}`, true));
			exec(`git checkout release/${newversion}-festo`, true);
			exec(`git cherry-pick FESTO`, true);
			exec(`git checkout master`, true);

			const { pushBranches } = await prompts({
				type: 'confirm',
				name: 'pushBranches',
				message: `Push branches ${branches.join(', ')}?`,
				initial: false
			});
			quitIf(!pushBranches);
			// branches.forEach((branch) => `git push -u origin ${branch}`);
		}
	)
	.command(
		'release-version <newversion>',
		'Tag new release',
		() => {},
		(argv) => {
			const { newversion } = argv;
			if (!currentBranch().startsWith('release/')) {
				console.error('Not on branch "release/*"!');
				process.exit(1);
			}
			exec(`git tag ${newversion}`, true);
			exec(`git branch release/${newversion}-festo`, true);
			exec(`git checkout release/${newversion}-festo`, true);
			exec(`git cherry-pick FESTO`, true);
		}
	)
	.demandCommand()
	.help().argv;
